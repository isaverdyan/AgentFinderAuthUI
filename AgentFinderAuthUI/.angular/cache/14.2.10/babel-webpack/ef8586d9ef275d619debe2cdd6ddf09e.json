{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { CustomerService } from 'src/app/services/customer.service';\nimport * as alertify from 'alertifyjs';\nimport { SelectionModel } from '@angular/cdk/collections';\nlet CustomersComponent = class CustomersComponent {\n  constructor(customerService) {\n    this.customerService = customerService;\n    this.displayedColumns = ['select', 'position', 'id', 'firstname', 'lastname', 'username', 'email', 'action'];\n    this.selection = new SelectionModel(true, []);\n  }\n\n  ngOnInit() {\n    this.getAll();\n    this.customerService.RequiredRefresh.subscribe(r => {\n      this.getAll();\n    });\n  }\n\n  getAll() {\n    this.customerService.getAll().subscribe(result => {\n      this.cstdata = result;\n      this.dataSource = new MatTableDataSource(this.cstdata);\n      this.dataSource.paginator = this.paginator;\n      this.dataSource.sort = this.sort;\n    });\n  }\n\n  FunctionDelete(id) {\n    alertify.confirm(\"Remove Employee\", \"Do you want to remove?\", () => {\n      this.customerService.Remove(id).subscribe(result => {\n        this.getAll();\n        alertify.success(\"Removed successfully.\");\n      });\n    }, function () {});\n  }\n\n  Filterchange(event) {\n    const filvalue = event.target.value;\n    this.dataSource.filter = filvalue;\n  }\n  /** Whether the number of selected elements matches the total number of rows. */\n\n\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected === numRows;\n  }\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\n\n\n  toggleAllRows() {\n    if (this.isAllSelected()) {\n      this.selection.clear();\n      return;\n    }\n\n    this.selection.select(...this.dataSource.data);\n  }\n\n  masterToggle() {\n    this.isAllSelected() ? this.selection.clear() : this.dataSource.data.forEach(row => this.dataSource.select(row));\n  }\n  /** The label for the checkbox on the passed row */\n\n\n  checkboxLabel(row) {\n    if (!row) {\n      return `${this.isAllSelected() ? 'deselect' : 'select'} all`;\n    }\n\n    return `${this.selection.isSelected(row) ? 'deselect' : 'select'} row ${row.position + 1}`;\n  }\n\n};\n\n__decorate([ViewChild(MatPaginator), __metadata(\"design:type\", MatPaginator)], CustomersComponent.prototype, \"paginator\", void 0);\n\n__decorate([ViewChild(MatSort), __metadata(\"design:type\", MatSort)], CustomersComponent.prototype, \"sort\", void 0);\n\nCustomersComponent = __decorate([Component({\n  selector: 'app-customers',\n  templateUrl: './customers.component.html',\n  styleUrls: ['./customers.component.scss']\n}), __metadata(\"design:paramtypes\", [CustomerService])], CustomersComponent);\nexport { CustomersComponent };","map":null,"metadata":{},"sourceType":"module"}