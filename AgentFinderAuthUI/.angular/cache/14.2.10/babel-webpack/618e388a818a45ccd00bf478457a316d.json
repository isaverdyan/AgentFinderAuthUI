{"ast":null,"code":"import { HttpClient } from \"@angular/common/http\";\nimport { environment } from \"../environments/environment\";\nimport { Subject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AppConfig = /*#__PURE__*/(() => {\n  class AppConfig {\n    constructor(http) {\n      this.http = http;\n      this.originUrl = \"\";\n      this.agentFinderApi = \"https://localhost:7216/\";\n      this.loginPage = \"\";\n      this.logoutPage = \"\";\n      this.homePage = \"\";\n      this.reviewsApiUrl = \"\";\n      this.authSettings = {\n        authority: \"\",\n        redirectUri: \"\",\n        clientId: \"\",\n        responseType: \"\",\n        scope: \"\"\n      };\n      this.onConfigLoaded = new Subject();\n    }\n\n    parse(configuration) {\n      this.originUrl = configuration.originUrl ? configuration.originUrl : window.location.protocol + \"//\" + window.location.host;\n      this.agentFinderApi = configuration.agentFinderApi;\n      this.reviewsApiUrl = configuration.reviewsApiUrl;\n      this.loginPage = configuration.loginPage;\n      this.logoutPage = configuration.logoutPage;\n      this.homePage = configuration.homePage;\n    }\n\n    load() {\n      return new Promise((resolve, reject) => {\n        this.http.get(environment.configurationFile).subscribe(response => {\n          this.parse(response);\n          this.onConfigLoaded.next();\n          this.onConfigLoaded.complete();\n          resolve();\n        }, response => {\n          reject(`Could not load file '${environment.configurationFile}': ${JSON.stringify(response)}`);\n        });\n      });\n    }\n\n  }\n\n  AppConfig.ɵfac = function AppConfig_Factory(t) {\n    return new (t || AppConfig)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AppConfig.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AppConfig,\n    factory: AppConfig.ɵfac\n  });\n  return AppConfig;\n})();","map":null,"metadata":{},"sourceType":"module"}